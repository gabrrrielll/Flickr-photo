{"version":3,"sources":["components/Search.js","components/View.js","components/getData.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","onSubmit","searchVal","id","name","onChange","inputHandler","placeholder","state","alert","search","View","items","map","item","index","key","title","src","farm","server","secret","alt","getdata","url","a","axios","get","headers","Accept","mode","credentials","response","require","config","App","searchText","lastSearch","pageNumber","pages","allPagesLoads","message","e","setState","target","value","getApiData","length","res","data","photos","photo","preventDefault","this","options","root","document","querySelector","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f7df8555.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <div className=\"search-block\">\r\n            <form onSubmit={props.searchVal}>\r\n                <input id=\"search\" name=\"search\" onChange={props.inputHandler} placeholder=\"Search here\" />\r\n                <span>\r\n                    <button id=\"submit\">Search</button>\r\n                </span>\r\n                <p id=\"alert\">{props.state && props.state.alert !== \"\" ? props.state.alert : null}</p>\r\n                <p>\r\n                    Your search is: <b> {props.search}</b>\r\n                </p>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst View = (props) => {\r\n    return props.state.items.map((item, index) => (\r\n        <div className=\"item\" key={index}>\r\n            <div className=\"title\">{item.title ? item.title : \"Empty title\"}</div>\r\n            <div className=\"content\">\r\n                <img src={\"https://farm\" + item.farm + \".staticflickr.com/\" + item.server + \"/\" + item.id + \"_\" + item.secret + \"_q.jpg\"} alt={item.title} />\r\n            </div>\r\n        </div>\r\n    ));\r\n};\r\n\r\nexport default View;\r\n","import axios from \"axios\";\r\n\r\nexport const getdata = async (url) => {\r\n    var response = await axios.get(url, {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        mode: \"no-cors\",\r\n        credentials: \"include\",\r\n    });\r\n\r\n    return response;\r\n};\r\n","import React, { Component } from \"react\";\nimport Search from \"./components/Search\";\nimport View from \"./components/View\";\nimport \"./App.css\";\nimport { getdata } from \"./components/getData\";\nrequire(\"dotenv\").config();\nclass App extends Component {\n    state = {\n        searchText: \"\",\n        lastSearch: false,\n        items: [],\n        pageNumber: 1,\n        pages: 1,\n        allPagesLoads: false,\n        message: \"Loading . . .\",\n        alert: \"\",\n    };\n\n    inputHandler = (e) => {\n        this.setState({ searchText: e.target.value, pageNumber: 1, alert: \"\" });\n    };\n\n    getApiData = async () => {\n        let url = \"https://api.flickr.com/services/rest/?method=flickr.photos.search&format=json&nojsoncallback=1&api_key=\" + process.env.REACT_APP_SECRET_KEY + \"&is_getty=1&page=\" + this.state.pageNumber;\n\n        if (this.state.searchText.length > 2) {\n            url += \"&tags=\" + this.state.searchText;\n        }\n\n        var response = await getdata(url);\n        var res = response.data.photos;\n\n        if (this.state.pageNumber < res.pages && res.pages > 1) {\n            this.setState({\n                message: \"Loading . . .\",\n                allPagesLoads: false,\n            });\n        } else if (this.state.pageNumber >= res.pages && res.pages > 0) {\n            this.setState({\n                message: \"That's all folks\",\n                allPagesLoads: true,\n                pageNumber: 1,\n            });\n        } else if (res.pages === 0) {\n            this.setState({\n                message: \"Nothing here!  ðŸ¤· Search another word.\",\n                allPagesLoads: true,\n            });\n        }\n\n        this.setState({\n            items: [...this.state.items, ...res.photo],\n            pages: res.pages,\n            pageNumber: this.state.pageNumber + 1,\n            lastSearch: this.state.searchText,\n        });\n    };\n\n    componentDidMount() {\n        this.getApiData();\n\n        let options = {\n            root: document.querySelector(\".view\"),\n        };\n\n        let callback = (entries) => {\n            entries.forEach((entry) => {\n                if (entry.isIntersecting && !this.state.allPagesLoads && this.state.items.length > 0) {\n                    this.getApiData();\n                }\n            });\n        };\n\n        let observer = new IntersectionObserver(callback, options);\n\n        let target = document && document.querySelector(\"#end\");\n\n        observer.observe(target);\n    }\n\n    searchVal = (e) => {\n        e.preventDefault();\n\n        if (this.state.searchText.length > 2) {\n            this.setState({ items: [], pageNumber: 1, alert: \"\" });\n            this.getApiData();\n        } else this.setState({ alert: \"Search tag must contain minim three characters\" });\n    };\n\n    render() {\n        return (\n            <div className=\"view\">\n                <Search inputHandler={this.inputHandler} search={this.state.searchText} searchVal={this.searchVal} state={this.state} />\n                <View state={this.state} />\n                <div id=\"end\">\n                    <h3>{this.state.message}</h3>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}